// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

model User {
  id              String   @id @unique @default(uuid())
  email           String   @unique
  password        String
  name            String
  surname         String
  studentRegister String   @unique @map("student_register")
  role            UserRole @default(STUDENT)
  createdAt       DateTime @default(now()) @map("created_at")
  Period          Period[]

  schoolId String    @map("school_id")
  school   School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  Rating   Rating[]
  Comment  Comment[]

  @@map("users")
}

model Period {
  id        String   @id @unique @default(uuid())
  order     Int
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("periods")
}

model School {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  User      User[]
  Course    Course[]

  @@map("schools")
}

model Course {
  id        String    @id @unique @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  Subject   Subject[]

  schoolId String @map("school_id")
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("courses")
}

model Subject {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  courseId String    @map("course_id")
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Rating   Rating[]
  Comment  Comment[]

  @@map("subjects")
}

model Rating {
  id        String   @id @unique @default(uuid())
  sentence  String
  score     Int
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subjectId String  @map("subject_id")
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model Comment {
  id        String   @id @unique @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subjectId String  @map("subject_id")
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("comments")
}
